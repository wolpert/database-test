/*
 * Copyright (c) 2022 CodeHead Systems. All rights reserved
 */

// Testing in Intelij requires the library in your lib path. Errors will show where it needs to be. Example
// from an Ubuntu box
//  sudo mkdir /usr/lib/jni
//  sudo cp -i oop-mock-dynamodb/build/libs/libsqlite4java-linux-amd64-1.0.392.so /usr/lib/jni
buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://maven.google.com" } // Google's Maven repository
        gradlePluginPortal() // was jcenter() which is dying
        google()
    }
}
plugins {
    id 'java-library'
    id 'jacoco'
    id 'idea'
    id 'signing'
    id 'maven-publish'
}
java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}
repositories {
    mavenLocal()
    mavenCentral()
    gradlePluginPortal()  // was jcenter() which is dying
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    maven { url "https://s3-us-west-2.amazonaws.com/dynamodb-local/release/" }
}

group 'com.codeheadsystems'
version '1.0.1-SNAPSHOT'


ext {
    appName = "database-test"
}

configurations {
    project.archivesBaseName = "${appName}"
    jar.baseName = "${appName}"
    dynamodb
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = appName
            from(components.java)
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Database-Test'
                description = 'Testing utilities for databases'
                url = 'https://github.com/wolpert/database-test'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wolpert'
                        name = 'Ned Wolpert'
                        email = 'ned.wolpert@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wolpert/database-test.git'
                    developerConnection = 'scm:git:ssh://github.com/wolpert/database-test.git'
                    url = 'https://github.com/wolpert/database-test/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = "ossrh"
            credentials(PasswordCredentials)
        }
    }
}
signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}
//jacocoTestReport.finalizedBy jacocoTestCoverageVerification
test {
    useJUnitPlatform() // needed for junit5
    finalizedBy jacocoTestReport
}
jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/dagger/**.class',
                    '**/Dagger*Builder.class',
                    '**/*Exception.class',
                    '**/*Module.class',
                    '**/*_Factory.class',
                    '**/*_Factory.*class',
                    '**/*InstanceHolder.class',
                    '**/*_Factory$InstanceHolder.class'
            ])
        }))
    }
}
def excludeFiles = [
        '**.dagger.**',
        '**.Dagger*Builder',
        '**.*Exception',
        '**.*Module',
        '**.*_Factory',
        '**.*_Factory*',
        '**.InstanceHolder',
        '**.*_Factory$InstanceHolder'
]
jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            excludes = excludeFiles
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
        }
        rule {
            excludes = excludeFiles
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}


task copyNativeDeps(type: Copy) {
    from configurations.dynamodb
    into "$project.buildDir/libs/"
}

test.dependsOn copyNativeDeps
test.doFirst {
    systemProperty "java.library.path", 'build/libs'
}

dependencies {

    // DynamoDB testing
    dynamodb fileTree(dir: 'lib', include: ["*.dylib", "*.so", "*.dll"])
    dynamodb "com.amazonaws:DynamoDBLocal:1.15.0"
    implementation "com.amazonaws:DynamoDBLocal:1.15.0"
    implementation 'com.amazonaws:aws-java-sdk-dynamodb:1.12.307'
    implementation "software.amazon.awssdk:dynamodb:2.17.276"
    implementation "org.slf4j:slf4j-api:2.0.1"
    implementation("com.google.guava:guava:31.1-jre")

    implementation "com.codeheadsystems:codehead-test:1.0.1"
    api("org.assertj:assertj-core:3.23.1")
    api("org.junit.jupiter:junit-jupiter-engine:5.9.0")
    api("org.junit.jupiter:junit-jupiter-api:5.9.0")
    api("org.junit.jupiter:junit-jupiter-params:5.9.0")
    api("org.mockito:mockito-junit-jupiter:4.8.0")
    api("org.mockito:mockito-core:4.8.0")
    testImplementation("ch.qos.logback:logback-classic:1.4.1")
    testImplementation("ch.qos.logback:logback-core:1.4.1")
}
javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
